Index: systemd-shim/src/Makefile.am
===================================================================
--- systemd-shim.orig/src/Makefile.am
+++ systemd-shim/src/Makefile.am
@@ -21,6 +21,8 @@ systemd_shim_SOURCES = \
 	ntp-unit.c		\
 	power-unit.c		\
 	cgroup-unit.c		\
+	user-runtime-dir-unit.c	\
+	user-unit.c		\
 	state.h			\
 	state.c			\
 	systemd-iface.h		\
Index: systemd-shim/src/systemd-iface.h
===================================================================
--- systemd-shim.orig/src/systemd-iface.h
+++ systemd-shim/src/systemd-iface.h
@@ -54,6 +54,9 @@ static const gchar *systemd_iface =
     "<property name='ActiveState' type='s' access='read'/>"
     "<property name='LoadState' type='s' access='read'/>"
    "</interface>"
+   "<interface name='org.freedesktop.systemd1.Job'>"
+    "<property name='State' type='s' access='read'/>"
+   "</interface>"
   "</node>";

 #endif
Index: systemd-shim/src/systemd-shim.c
===================================================================
--- systemd-shim.orig/src/systemd-shim.c
+++ systemd-shim/src/systemd-shim.c
@@ -30,6 +30,12 @@
 #include <string.h>
 #include <stdio.h>

+int job=1000;
+char job_name[100];
+//int last_job=1000;
+//char last_job_name[100];
+//char last_unit_name[100];
+
 static gboolean
 exit_on_inactivity (gpointer user_data)
 {
@@ -121,8 +127,11 @@ shim_method_call (GDBusConnection

   else if (g_str_equal (method_name, "StopUnit"))
     {
-      const gchar *unit_name;
+      gchar *unit_name;
       Unit *unit;
+      guint64 value;
+      gchar *end;
+      gint uid = -1;

       g_variant_get_child (parameters, 0, "&s", &unit_name);
       g_debug ("StopUnit(%s)", unit_name);
@@ -131,10 +140,31 @@ shim_method_call (GDBusConnection
       if (unit)
         {
           unit_stop (unit);
-          g_dbus_method_invocation_return_value (invocation, g_variant_new ("(o)", "/"));
-          g_dbus_connection_emit_signal (connection, NULL, "/org/freedesktop/systemd1",
-                                         "org.freedesktop.systemd1.Manager", "UnitRemoved",
-                                         g_variant_new ("(so)", unit_name, "/"), NULL);
+          sprintf(&job_name[0], "/org/freedesktop/systemd1/job/%d", job);
+          g_dbus_method_invocation_return_value (invocation, g_variant_new ("(o)", job_name));
+          //last_job = job;
+          //strcpy(last_job_name, job_name);
+          //strcpy(last_unit_name, unit_name);
+          g_dbus_connection_emit_signal (connection, sender, "/org/freedesktop/systemd1",
+                                         "org.freedesktop.systemd1.Manager", "JobRemoved",
+                                         g_variant_new ("(uoss)", job, job_name, unit_get_state(unit), "done"), NULL);
+
+          if (g_str_has_suffix (unit_name, ".service"))
+            {
+              errno = 0;
+              value = g_ascii_strtoull (unit_name + 17, &end, 10);
+              if (errno == 0 && g_str_equal (end, ".service") && value < G_MAXINT)
+                uid = (gint) value;
+              sprintf(&unit_name[0], "user@%d.service", uid);
+              g_dbus_connection_emit_signal (connection, sender, "/org/freedesktop/systemd1",
+                                             "org.freedesktop.systemd1.Manager", "UnitRemoved",
+                                             g_variant_new ("(so)", unit_name, "/"), NULL);
+              sprintf(&unit_name[0], "user-runtime-dir@%d.service", uid);
+              g_dbus_connection_emit_signal (connection, sender, "/org/freedesktop/systemd1",
+                                             "org.freedesktop.systemd1.Manager", "UnitRemoved",
+                                             g_variant_new ("(so)", unit_name, "/"), NULL);
+            }
+          job++;
           g_object_unref (unit);
           goto success;
         }
@@ -152,10 +182,12 @@ shim_method_call (GDBusConnection
       if (unit)
         {
           unit_start (unit);
-          g_dbus_method_invocation_return_value (invocation, g_variant_new ("(o)", "/"));
+          sprintf(&job_name[0], "/org/freedesktop/systemd1/job/%d", job);
+          g_dbus_method_invocation_return_value (invocation, g_variant_new ("(o)", job_name));
           g_dbus_connection_emit_signal (connection, sender, "/org/freedesktop/systemd1",
                                          "org.freedesktop.systemd1.Manager", "JobRemoved",
-                                         g_variant_new ("(uoss)", 0, "/", "", ""), NULL);
+                                         g_variant_new ("(uoss)", job, job_name, unit_get_state(unit), "done"), NULL);
+          job++;
           g_object_unref (unit);
           goto success;
         }
@@ -175,10 +207,12 @@ shim_method_call (GDBusConnection

           properties = g_variant_get_child_value (parameters, 2);
           unit_start_transient (unit, properties);
-          g_dbus_method_invocation_return_value (invocation, g_variant_new ("(o)", "/"));
+          sprintf(&job_name[0], "/org/freedesktop/systemd1/job/%d", job);
+          g_dbus_method_invocation_return_value (invocation, g_variant_new ("(o)", job_name));
           g_dbus_connection_emit_signal (connection, sender, "/org/freedesktop/systemd1",
                                          "org.freedesktop.systemd1.Manager", "JobRemoved",
-                                         g_variant_new ("(uoss)", 0, "/", unit_get_state(unit), "done"), NULL);
+                                         g_variant_new ("(uoss)", job, job_name, unit_get_state(unit), "done"), NULL);
+          job++;
           g_variant_unref (properties);
           g_object_unref (unit);
           goto success;
@@ -264,7 +298,7 @@ escape_object_path (const gchar *path)
         result[j++] = path[i];
       else
         {
-          snprintf (&result[j], 4, "_%02x", (guint) path[i]);
+          snprintf (&result[j], 4, "_%02x", (guint8) path[i]);
           j += 3;
         }
     }
@@ -301,6 +335,9 @@ shim_unit_method_call (GDBusConnection
         {
           unit_abandon (unit);

+          g_dbus_connection_emit_signal (connection, sender, "/org/freedesktop/systemd1",
+                                         "org.freedesktop.systemd1.Manager", "UnitRemoved",
+                                         g_variant_new ("(so)", unit_name, "/"), NULL);
           g_dbus_method_invocation_return_value (invocation, NULL);
           g_object_unref (unit);
         }
@@ -317,6 +354,21 @@ shim_unit_method_call (GDBusConnection
     g_assert_not_reached ();
 }

+static void
+shim_job_method_call (GDBusConnection       *connection,
+                      const gchar           *sender,
+                      const gchar           *object_path,
+                      const gchar           *interface_name,
+                      const gchar           *method_name,
+                      GVariant              *parameters,
+                      GDBusMethodInvocation *invocation,
+                      gpointer               user_data)
+{
+  const gchar *node = user_data;
+
+  had_activity ();
+}
+
 static GVariant *
 shim_unit_get_property (GDBusConnection  *connection,
                         const gchar      *sender,
@@ -340,6 +392,28 @@ shim_unit_get_property (GDBusConnection
   return NULL;
 }

+static GVariant *
+shim_job_get_property (GDBusConnection  *connection,
+                       const gchar      *sender,
+                       const gchar      *object_path,
+                       const gchar      *interface_name,
+                       const gchar      *property_name,
+                       GError          **error,
+                       gpointer          user_data)
+{
+  had_activity ();
+
+  //g_warning ("Got property: %s, with interface: %s, on path: %s", property_name, interface_name, object_path);
+  //if (g_strcmp0(property_name, "State") == 0) {
+  //  g_dbus_connection_emit_signal (connection, sender, "/org/freedesktop/systemd1",
+  //                                 "org.freedesktop.systemd1.Manager", "JobRemoved",
+  //                                 g_variant_new ("(uoss)", last_job, last_job_name, last_unit_name, "done"), NULL);
+  //  return g_variant_new_string ("running");
+  //}
+
+  return NULL;
+}
+
 static gchar **
 shim_units_enumerate (GDBusConnection *connection,
                       const gchar     *sender,
@@ -365,6 +439,31 @@ shim_units_enumerate (GDBusConnection *c
   return cgroups;
 }

+static gchar **
+shim_jobs_enumerate (GDBusConnection *connection,
+                     const gchar     *sender,
+                     const gchar     *object_path,
+                     gpointer         user_data)
+{
+  gchar **cgroups;
+  guint i;
+
+  had_activity ();
+
+  cgroups = state_list_units ();
+
+  for (i = 0; cgroups[i]; i++)
+    {
+      gchar *unescaped;
+
+      unescaped = cgroups[i];
+      cgroups[i] = escape_object_path (unescaped);
+      g_free (unescaped);
+    }
+
+  return cgroups;
+}
+
 static GDBusInterfaceInfo* shim_units_iface;
 static GDBusInterfaceInfo* shim_scope_iface;

@@ -381,7 +480,24 @@ shim_units_introspect (GDBusConnection *

   had_activity ();

-  return g_memdup (result, sizeof result);
+  return g_memdup2 (result, sizeof result);
+}
+
+static GDBusInterfaceInfo* shim_jobs_iface;
+
+static GDBusInterfaceInfo **
+shim_jobs_introspect (GDBusConnection *connection,
+                      const gchar     *sender,
+                      const gchar     *object_path,
+                      const gchar     *node,
+                      gpointer         user_data)
+{
+  GDBusInterfaceInfo *result[] = { g_dbus_interface_info_ref (shim_jobs_iface),
+                                   NULL };
+
+  had_activity ();
+
+  return g_memdup2 (result, sizeof result);
 }

 static const GDBusInterfaceVTable *
@@ -405,6 +521,27 @@ shim_units_dispatch (GDBusConnection *co
   return &vtable;
 }

+static const GDBusInterfaceVTable *
+shim_jobs_dispatch (GDBusConnection *connection,
+                    const gchar     *sender,
+                    const gchar     *object_path,
+                    const gchar     *interface_name,
+                    const gchar     *node,
+                    gpointer        *out_user_data,
+                    gpointer         user_data)
+{
+  static const GDBusInterfaceVTable vtable = {
+    shim_job_method_call,
+    shim_job_get_property
+  };
+
+  had_activity ();
+
+  *out_user_data = (gpointer) node;
+
+  return &vtable;
+}
+
 static void
 shim_bus_acquired (GDBusConnection *connection,
                    const gchar     *name,
@@ -414,11 +551,16 @@ shim_bus_acquired (GDBusConnection *conn
     shim_method_call,
     shim_get_property,
   };
-  GDBusSubtreeVTable sub_vtable = {
+  GDBusSubtreeVTable sub_unit_vtable = {
     shim_units_enumerate,
     shim_units_introspect,
     shim_units_dispatch
   };
+  GDBusSubtreeVTable sub_job_vtable = {
+    shim_jobs_enumerate,
+    shim_jobs_introspect,
+    shim_jobs_dispatch
+  };
   GDBusInterfaceInfo *iface;
   GDBusNodeInfo *node;

@@ -429,11 +571,16 @@ shim_bus_acquired (GDBusConnection *conn
   shim_units_iface = g_dbus_node_info_lookup_interface (node, "org.freedesktop.systemd1.Unit");
   g_assert (shim_units_iface);
   g_dbus_interface_info_ref (shim_units_iface);
+  shim_jobs_iface = g_dbus_node_info_lookup_interface (node, "org.freedesktop.systemd1.Job");
+  g_assert (shim_jobs_iface);
+  g_dbus_interface_info_ref (shim_jobs_iface);

   iface = g_dbus_node_info_lookup_interface (node, "org.freedesktop.systemd1.Manager");

   g_dbus_connection_register_object (connection, "/org/freedesktop/systemd1", iface, &vtable, NULL, NULL, NULL);
-  g_dbus_connection_register_subtree (connection, "/org/freedesktop/systemd1/unit", &sub_vtable,
+  g_dbus_connection_register_subtree (connection, "/org/freedesktop/systemd1/unit", &sub_unit_vtable,
+                                      G_DBUS_SUBTREE_FLAGS_DISPATCH_TO_UNENUMERATED_NODES, NULL, NULL, NULL);
+  g_dbus_connection_register_subtree (connection, "/org/freedesktop/systemd1/job", &sub_job_vtable,
                                       G_DBUS_SUBTREE_FLAGS_DISPATCH_TO_UNENUMERATED_NODES, NULL, NULL, NULL);

   g_dbus_node_info_unref (node);
Index: systemd-shim/src/unit.c
===================================================================
--- systemd-shim.orig/src/unit.c
+++ systemd-shim/src/unit.c
@@ -59,6 +59,12 @@ lookup_unit (const gchar  *unit_name,
   else if (g_str_has_suffix (unit_name, ".slice") || g_str_has_suffix (unit_name, ".scope"))
     unit = cgroup_unit_new (unit_name);

+  else if (g_str_has_prefix (unit_name, "user-runtime-dir@") || g_str_has_suffix (unit_name, ".service"))
+    unit = user_runtime_dir_unit_new (unit_name);
+
+  else if (g_str_has_prefix (unit_name, "user@") || g_str_has_suffix (unit_name, ".service"))
+    unit = user_unit_new (unit_name);
+
   if (unit == NULL)
     g_set_error (error, G_DBUS_ERROR, G_DBUS_ERROR_FILE_NOT_FOUND,
                  "Unknown unit: %s", unit_name);
Index: systemd-shim/src/unit.h
===================================================================
--- systemd-shim.orig/src/unit.h
+++ systemd-shim/src/unit.h
@@ -62,4 +62,8 @@ Unit *power_unit_new (PowerAction action

 Unit *cgroup_unit_new (const gchar *name);

+Unit *user_runtime_dir_unit_new (const gchar *name);
+
+Unit *user_unit_new (const gchar *name);
+
 #endif /* _unit_h_ */
Index: systemd-shim/src/user-runtime-dir-unit.c
===================================================================
--- /dev/null
+++ systemd-shim/src/user-runtime-dir-unit.c
@@ -0,0 +1,124 @@
+/*
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the licence, or (at
+ * your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
+ * USA.
+ */
+
+#define _GNU_SOURCE
+
+#include "state.h"
+#include "unit.h"
+
+#include <stdlib.h>
+#include <stdio.h>
+#include <string.h>
+#include <unistd.h>
+#include <fcntl.h>
+#include <errno.h>
+#include <glib/gstdio.h>
+
+typedef UnitClass UserRuntimeDirUnitClass;
+static GType user_runtime_dir_unit_get_type (void);
+
+typedef struct
+{
+  Unit parent_instance;
+  gchar *name;
+} UserRuntimeDirUnit;
+
+G_DEFINE_TYPE (UserRuntimeDirUnit, user_runtime_dir_unit, UNIT_TYPE)
+
+static gint
+user_runtime_dir_unit_get_uid (const gchar *name)
+{
+  guint64 value;
+  gchar *end;
+  gint uid = -1;
+
+  if (!g_str_has_prefix (name, "user-runtime-dir@"))
+    {
+      g_warning ("%s: Can only Start for user-runtime-dir@<uid>.service", name);
+      return uid;
+    }
+
+  errno = 0;
+  value = g_ascii_strtoull (name + 17, &end, 10);
+  if (errno == 0 && g_str_equal (end, ".service") && value < G_MAXINT)
+    uid = (gint) value;
+
+  return uid;
+}
+
+static void
+user_runtime_dir_unit_start (Unit *unit)
+{
+  UserRuntimeDirUnit *urd_unit = (UserRuntimeDirUnit *) unit;
+  gint uid;
+  char command[256];
+
+  uid = user_runtime_dir_unit_get_uid (urd_unit->name);
+  if (uid >= 0)
+    {
+      sprintf(command, "/usr/lib/systemd/systemd-user-runtime-dir start %d &", uid);
+      if (system(command) < 0)
+        g_warning ("%s: Command failed, errno: %d", command, errno);
+    }
+}
+
+static void
+user_runtime_dir_unit_stop (Unit *unit)
+{
+  UserRuntimeDirUnit *urd_unit = (UserRuntimeDirUnit *) unit;
+  gint uid;
+  char command[256];
+
+  uid = user_runtime_dir_unit_get_uid (urd_unit->name);
+  if (uid >= 0)
+    {
+      sprintf(command, "/usr/lib/systemd/systemd-user-runtime-dir stop %d &", uid);
+      if (system(command) < 0)
+        g_warning ("%s: Command failed, errno: %d", command, errno);
+    }
+}
+
+static const gchar *
+user_runtime_dir_unit_get_state (Unit *unit)
+{
+  UserRuntimeDirUnit *urd_unit = (UserRuntimeDirUnit *)unit;
+  return urd_unit->name;
+}
+
+Unit *
+user_runtime_dir_unit_new (const gchar *name)
+{
+  UserRuntimeDirUnit *unit;
+
+  unit = g_object_new (user_runtime_dir_unit_get_type (), NULL);
+  unit->name = g_strdup (name);
+
+  return (Unit *) unit;
+}
+
+static void
+user_runtime_dir_unit_init (UserRuntimeDirUnit *unit)
+{
+}
+
+static void
+user_runtime_dir_unit_class_init (UnitClass *class)
+{
+  class->start = user_runtime_dir_unit_start;
+  class->stop = user_runtime_dir_unit_stop;
+  class->get_state = user_runtime_dir_unit_get_state;
+}
Index: systemd-shim/src/user-unit.c
===================================================================
--- /dev/null
+++ systemd-shim/src/user-unit.c
@@ -0,0 +1,81 @@
+/*
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the licence, or (at
+ * your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
+ * USA.
+ */
+
+#define _GNU_SOURCE
+
+#include "state.h"
+#include "unit.h"
+
+#include <stdlib.h>
+#include <stdio.h>
+#include <string.h>
+#include <unistd.h>
+#include <fcntl.h>
+#include <errno.h>
+#include <glib/gstdio.h>
+
+typedef UnitClass UserUnitClass;
+static GType user_unit_get_type (void);
+
+typedef struct
+{
+  Unit parent_instance;
+  gchar *name;
+} UserUnit;
+
+G_DEFINE_TYPE (UserUnit, user_unit, UNIT_TYPE)
+
+static void
+user_unit_start (Unit *unit)
+{
+}
+
+static void
+user_unit_stop (Unit *unit)
+{
+}
+
+static const gchar *
+user_unit_get_state (Unit *unit)
+{
+  UserUnit *user_unit = (UserUnit *)unit;
+  return user_unit->name;
+}
+
+Unit *
+user_unit_new (const gchar *name)
+{
+  UserUnit *unit;
+
+  unit = g_object_new (user_unit_get_type (), NULL);
+  unit->name = g_strdup (name);
+
+  return (Unit *) unit;
+}
+
+static void
+user_unit_init (UserUnit *unit)
+{
+}
+
+static void
+user_unit_class_init (UnitClass *class)
+{
+  class->start = user_unit_start;
+  class->stop = user_unit_stop;
+  class->get_state = user_unit_get_state;
+}
